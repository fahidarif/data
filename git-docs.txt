git clone (re pository url ro clone)
press q //to exit from the output log
git log // to view the commits on repositry  
git status// to check the stas of the working files according to master commit
git log --stat //to view the commit (versions) history of repositry with more statistical details
git diff (commite id) (scnd commit id) // to view the differences between the codes in commits
git config --global color.ui auto //to view coloured output in log 
git checkout (commit id)// used to rewert the most recent version to a specific version(commit) to overcome the recently occured bug
git checkout master// this cmnd is used revert back to most recent version of the commit
ls // commad to see the list of files in na repository
ls -a // to see also a hidden files with other files 
git add (file)// used to add files into the stagging area to track and commit it
git diff// this command is used to compare the stagging area file data with the working dirrectory
git diff --staged// used to compare the files data from stagged area to the repositry which is commited 
git reset --hard // to reset the changes in working directory according to the stagged files data 
git init // used to initialize the data 
git status // used to show which file is changed since the last commit
git add (file)// sed to add the files into the stagging area to track for the commit
git commit -m "short message" -m "decription(optional)"//to snapshot to working code into u repo 
git commit -m 'jsdfkjsefqwe'// u can use single/double quotation mark remain open to use multiple line and type enter to go to new line when u finsh typing then cloase the mark and hit enter to execute commad  

branches to avoid changes to the main file thats why create branch(copy) of file and named it as we like and start experimentall working on it
git branch// to check which branches u have (like master(default))
git branch (branch name)// used to create new brach at master level
git checkout (branch name)// to switch to that branch which u like to switch
git checkout -b (new branch name)// equals to 2 commands 1=> git branch (new branch name ) 2=> git checkout (new branch name)

git log --graph --oneline (branch name) (branch name2 ) //used to see the structure of project according to the branches 
git show (comit id) // to view changes wi respect to the parent 
git branch -d (branch name)// to delete the branch after merging 
git push <remote_name> --delete <branch_name>// used to delete branch from remote
$ git push <remote_name> :<branch_name>//also used to delete branch from remote
git branch -D (branch name)// to delete the branch no matter it is merged or not 
git merge (branch name to merge)// to merge the branch into checkouted branch
git log -n 1// to show one commit history or multiple by changing the numbr
git remote// to view which remote repositories u r connected to 
git remote add (aliasnameforrepositry) (repoitory link to connect)//to create connection
git remote -v// to view verbose of remote repositories
git remote set-url (remoteNameInWhichToChangeAddress) (new git remote address)//to change the old remote address to new git remote address
git push (aliasnameforrepositry) (branch name to push)
git pull (aliasnameforrepositry) (btanch name to pull)//used to get changes from github to local 
git rm -r --cached . // used to remove all tracking staged files from stagging area
git rm -r --cached (file name from stagging area to uuntrack)
git diff (aliasnameforrepositry(origin))/master(branchname from github) master(local branch name)// to view the differcence between the github remote branch to the local branch
git log (aliasnameforrepositry(origin))/master(branchname from github)// to view the info about  github pushed repository
git touch (filename like .gitignore)// to create file
git commit --amend //to undo the most recent commit or to change the wording of the commit message
git shortlog // to view logs in a short descriptive way also shows nmbr of commits according to collaborators
git shortlog -s -n //displays an alphabetical list of names and the commit messages that go along with them -s to show just the number of commits (rather than each commit's message) and -n to sort them numerically (rather than alphabetically by author name).
git log --author=Surma // filter commits by author 
git log --author="Paul Lewis"// to filter by full name 
git log --grep=bug //We can filter commits with the --grep flag. used to filter commits through their message description written in

git config --global core.editor ("'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w") // used to set default editor where n indicate new open in new window
git config --global push.default upstream
git config --global merge.conflictstyle diff3

git stash save "name of stash" // to save temporarily piece of change for future use if u don't have to commit it at the moment
git stash list// to show all stashes
git stash apply "stash unique name like stash{0} etc"// use to restore the change 
git stash clear // to clear all stash history
git stash drop "stash unique name"// to clear specific stash

git branch --set-upstream-to=origin/master //to set upstream branch